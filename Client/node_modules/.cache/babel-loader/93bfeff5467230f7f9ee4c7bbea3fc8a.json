{"ast":null,"code":"var _jsxFileName = \"/Users/davidsanders/Documents/CodingProjects/setlists/Client/src/components/setListForm/setListForm.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { useDispatch } from \"react-redux\"; //import \"./setListForm.css\";\n\nimport { addSong } from \"../../features/setListSlice\"; //loading the file locally to avoid too many calls to free server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst songs = require(\"../../songdata/jazz-standards.json\");\n\nexport const SetListForm = () => {\n  _s();\n\n  //const [songs, setSongs] = useState([]);\n  const [value, setValue] = useState([]);\n  const [bpm, setBPM] = useState([]);\n  const dispatch = useDispatch(); // useEffect(() => {\n  //   // pulls data from free server I set up under my gmail\n  //   (async () => {\n  //     try {\n  //       const response = await fetch(\n  //         \"https://api.jsonbin.io/b/61e04ba80f639830851b89c1\"\n  //       );\n  //       if (response.ok) {\n  //         const jsonResponse = await response.json();\n  //         setSongs(jsonResponse);\n  //         return;\n  //       }\n  //       throw new Error(\"Request Failed!\");\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   })();\n  // }, []);\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    if (value.length > 40) {\n      window.alert(\"That title is too long!\");\n      return;\n    }\n\n    if (bpm < 40 || bpm > 400) {\n      window.alert(\"That tempo is too extreme!\");\n      return;\n    }\n\n    dispatch(addSong({\n      title: value,\n      bpm: bpm\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"setlist-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex justify-center items-center flex-col\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" song-submit\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          list: \"song-titles\",\n          className: \"form-elements p-2 rounded-md w-60 border border-black\",\n          placeholder: \"Type in a song to add!\",\n          type: \"text\",\n          id: \"title\",\n          name: \"title\",\n          value: value,\n          onChange: event => setValue(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"song-titles\",\n          children: songs.map(song => /*#__PURE__*/_jsxDEV(\"option\", {\n            year: song.Year,\n            children: song.Standard\n          }, song.Standard, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-elements\",\n          htmlFor: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bpm-submit\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-elements p-2 rounded-md w-60 mt-3 border border-black\",\n          placeholder: \"Choose a BPM\",\n          id: \"bpm\",\n          name: \"bpm\",\n          min: \"40\",\n          max: \"400\",\n          step: \"1\",\n          bpm: value,\n          onChange: event => setBPM(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-elements\",\n          htmlFor: \"bpm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-primary mt-3 p-3 rounded-md text-white\",\n        children: \"Add song\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetListForm, \"0/u+8cIr15+zxX6CcvojlgCeGjc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SetListForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetListForm\");","map":{"version":3,"sources":["/Users/davidsanders/Documents/CodingProjects/setlists/Client/src/components/setListForm/setListForm.js"],"names":["React","useState","useDispatch","addSong","songs","require","SetListForm","value","setValue","bpm","setBPM","dispatch","onSubmit","event","preventDefault","length","window","alert","title","target","map","song","Year","Standard"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n//import \"./setListForm.css\";\nimport { addSong } from \"../../features/setListSlice\";\n\n//loading the file locally to avoid too many calls to free server\nconst songs = require(\"../../songdata/jazz-standards.json\");\n\nexport const SetListForm = () => {\n  //const [songs, setSongs] = useState([]);\n  const [value, setValue] = useState([]);\n  const [bpm, setBPM] = useState([]);\n  const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   // pulls data from free server I set up under my gmail\n  //   (async () => {\n  //     try {\n  //       const response = await fetch(\n  //         \"https://api.jsonbin.io/b/61e04ba80f639830851b89c1\"\n  //       );\n  //       if (response.ok) {\n  //         const jsonResponse = await response.json();\n  //         setSongs(jsonResponse);\n  //         return;\n  //       }\n  //       throw new Error(\"Request Failed!\");\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   })();\n  // }, []);\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (value.length > 40) {\n      window.alert(\"That title is too long!\");\n      return;\n    }\n\n    if (bpm < 40 || bpm > 400) {\n      window.alert(\"That tempo is too extreme!\");\n      return;\n    }\n    dispatch(\n      addSong({\n        title: value,\n        bpm: bpm,\n      })\n    );\n  };\n  return (\n    <div className=\"setlist-container\">\n      <form\n        className=\"flex justify-center items-center flex-col\"\n        onSubmit={onSubmit}\n      >\n        <div className=\" song-submit\">\n          <input\n            list=\"song-titles\"\n            className=\"form-elements p-2 rounded-md w-60 border border-black\"\n            placeholder=\"Type in a song to add!\"\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            value={value}\n            onChange={(event) => setValue(event.target.value)}\n          ></input>\n          <datalist id=\"song-titles\">\n            {songs.map((song) => (\n              <option key={song.Standard} year={song.Year}>\n                {song.Standard}\n              </option>\n            ))}\n          </datalist>\n          <label className=\"form-elements\" htmlFor=\"title\"></label>\n        </div>\n        <div className=\"bpm-submit\">\n          <input\n            className=\"form-elements p-2 rounded-md w-60 mt-3 border border-black\"\n            placeholder=\"Choose a BPM\"\n            id=\"bpm\"\n            name=\"bpm\"\n            min=\"40\"\n            max=\"400\"\n            step=\"1\"\n            bpm={value}\n            onChange={(event) => setBPM(event.target.value)}\n          ></input>\n          <label className=\"form-elements\" htmlFor=\"bpm\"></label>\n        </div>\n        <button className=\"bg-primary mt-3 p-3 rounded-md text-white\">\n          Add song\n        </button>\n      </form>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}